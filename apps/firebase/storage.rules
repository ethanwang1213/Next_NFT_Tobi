rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /users/{userId} {
      allow read: if true;
      // (journal) icon image uploaded on Tobiratory Journal
      match /icon/{fileName} {
        allow read: if true;
        allow write: if request.auth != null
          && request.auth.uid == userId
          && (
            request.resource == null
            || (
              request.resource.size < 10 * 400 * 400
              && request.resource.contentType == "image/png"
            )
          );
      }
      // (web) item data uploaded on demo SAIDAN
      match /item/{itemId}/{fileName} {
        allow read: if true;
        allow write: if request.auth != null
          && request.auth.uid == userId
          && request.resource.size < 10 * 1024 * 1024
          && (fileName == 'image.png' || fileName == 'model.glb');
      }
      // (web) 3D model data generated by user
      match /item/{modelType}/models/{fileName} {
        allow read: if true;
        allow write: if request.auth != null
          && request.auth.uid == userId
          && request.resource.size < 15 * 1024 * 1024; // uploaded type of model is limited 15mb
      }
      // (web) 3D model uploaded by user
      match /item/uploaded/models/{modelId}/{fileName} {
        allow read: if true;
        allow write, delete: if request.auth != null && request.auth.uid == userId;
      }
      // (Tobiratory app admin) copyright and license files for TCP
      match /tcp/copyright/files/{fileName} {
        allow read: if request.auth != null
          && request.auth.uid == userId;
        allow write: if request.auth != null
          && request.auth.uid == userId
          && request.resource.size < 20 * 1024 * 1024
          && request.resource.contentType.matches('image/jpeg|image/png|application/pdf');
        allow delete: if request.auth != null
          && request.auth.uid == userId;
      }
      // (Tobiratory app admin) content image
      match /contents/{fileName} {
        allow read: if true;
        allow write: if request.resource.contentType.matches('image/png')
          && request.resource.size < 4 * 1024 * 1024;
        allow delete: if request.auth != null
          && request.auth.uid == userId;
      }
      // (Tobiratory app admin) showcase thumbnail image
      match /showcase/{fileName} {
        allow read: if true;
        allow write: if true;
      }
    }
    // (flutter) sample material images on Tobiratory Native
    match /materials/{userId} {
      allow read: if true;
      match /{fileName} {
        allow read: if true;
        allow write: if true;
      }
    }
    // (flutter) sample thumbnail images on Tobiratory Native
    match /thumbnails/{userId} {
      allow read: if request.auth != null;
      match /{fileName} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
      }
    }
    // (flutter) user profile images on Tobiratory Native
    match /avatars/{userId} {
      allow read: if true;
      match /{fileName} {
        allow read: if true;
        allow write: if true;
      }
    }
    // (flutter) saidan thumbnail images on Tobiratory Native
    match /saidans/{userId} {
      allow read: if true;
      match /{fileName} {
        allow read: if true;
        allow write: if true;
      }
    }
    // (flutter) NFT models on Tobiratory Native
    match /nftModels/{userId} {
      allow read: if true;
      match /{fileName} {
        allow read: if true;
        allow write: if true;
      }
    }
    // (Common) temporary folder. Old files are automatically deleted.
    match /tmp/users/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null
        && request.auth.uid == userId
        && request.resource.size < 10 * 1024 * 1024;
      allow delete: if request.auth != null
        && request.auth.uid == userId;
    }
    match /debug/{fileName} {
      allow read: if true;
      match /{fileName} {
        allow read: if true;
        allow write: if true;
      }
    }
    match /documents/{userId} {
      allow read: if true;
      match /{fileName} {
        allow read: if true;
        allow write: if true;
      }
    }
  }
}