rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ログイン中のユーザー判定
    function isCurrentUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // 管理者判定
    // 基本的にはフロントからは呼ばれない
    function isAdmin() {
      // return request.auth != null && request.auth.token.admin == true;
      return false;
    }
    
    function isUndefined(data, field) {
      return !data.keys().hasAll([field]);
    }

    // users以下のデータは、基本的にログイン中のユーザーのみ読み書き可能
    // discordのidデータを書き込む場合は、
    //   そのidがindexに存在しない、
    //   または、自らに紐づくidがindexに存在することが必要
    //   (indexへの書き込みと併用)
    match /users/{userId} {
      allow read: if isCurrentUser(userId);
      allow write: if isCurrentUser(userId) && (
        (
          request.resource.data.discord == '' ||
          isUndefined(request.resource.data, "discord")
        ) || (
          (
            request.resource.data.discord != '' &&
            !isUndefined(request.resource.data, "discord")
          ) && (
            !exists(
              /databases/$(database)/documents/index/users/discord/$(request.resource.data.discord)
            ) || get(
              /databases/$(database)/documents/index/users/discord/$(request.resource.data.discord)
            ).data.userId == userId
          )
        )
      )
      
      match /src/{srcId} {
        allow read, write: if isCurrentUser(userId);
      }
      match /item/{itemId} {
        allow read, write: if isCurrentUser(userId);
      }
      match /nft/{nftId} {
        allow read, write: if isCurrentUser(userId);
      }
      match /nft/{nftId}/hold/{holdId} {
        allow read, write: if isCurrentUser(userId);
      }
      match /activity/{activytyId} {
        allow read, write: if isCurrentUser(userId);
      }
      match /community/{communityId} {
      	allow read: if isCurrentUser(userId);
        // houseTypeのタイポ修正のために書き込み許可
        allow update: if isCurrentUser(userId) && 
          communityId == "house" && 
          request.resource.data.type == "hudor" &&
          request.resource.data.size() == 1;
      }
    }

    // ユニーク制約用。書き込みは、
    // ログイン中のユーザーかつ、userのdiscordのデータが空である場合のみ可能
    // (ユーザーデータのdiscordへの書き込みと併用)
    match /index/users/discord/{discord} {
      allow write: if isCurrentUser(request.resource.data.userId) && 
        get(
          /databases/$(database)/documents/users/$(request.resource.data.userId)
        ).data.discord == "";
    }

    // Shopサイトでの注文情報を格納するコレクション
    // 注文情報は、管理者のみが読み書き可能
    match /orders/{orderId} {
      allow read, write: if isAdmin();
    }

    match /tobiraneko/{nftId} {
      allow read, write: if isAdmin();
    }


  }
}